#!/usr/bin/env perl
#
# vim: set ts=4:noet
#
# sbocheck
# script to update the local sbo tree and check for updates
#
# authors:	Jacob Pipkin <j@dawnrazor.net>
#			Luke Williams <xocel@iquidus.org>
# license: WTFPL <http://sam.zoy.org/wtfpl/COPYING>

use 5.16.0;
use strict;
use warnings FATAL => 'all';
use SBO::Lib;
use Getopt::Long;
use File::Basename;

my $self = basename($0);

sub show_usage() {
	print <<EOF
Usage: $self

Options:
  -h|--help:
    this screen.
  -v|--version:
    version information.

EOF
}

my ($help, $vers);

GetOptions('help|h' => \$help, 'version|v' => \$vers);

show_usage and exit 0 if $help;
show_version and exit 0 if $vers;

update_tree;

# retrieve and format list of available updates
sub get_update_list() {
	print "Checking for updated SlackBuilds...\n";
	my $updates = get_available_updates; 
	# consistent formatting - first we need the minimum length for name-version
	my @lengths;
	push @lengths, length "$$updates[$_]{name}-$$updates[$_]{installed}"
		for keys @$updates;
	my @s_lengths = sort {$b <=> $a} @lengths;
	my $min = $s_lengths[0];
	$min = 37 if $min > 37;

	my @listing;
	for my $update (@$updates) {
		push(@listing, sprintf "%-${min}s  <  needs updating (SBo has %s)",
			"$$update{name}-$$update{installed}", "$$update{update}");
	}
	return \@listing;
}

# print list of updates
sub print_output($) {
	exists $_[0] or script_error 'print_output requires an argument';
	my $listing = shift;
	if (exists $$listing[0]) {
		print "\n";
		say $_ for @$listing;
		print "\n";
		# save a log of available updates
		my $logfile = '/var/log/sbocheck.log';
		unlink $logfile if -f $logfile;
		my $log_fh = open_fh($logfile, '>');
		say {$log_fh} $_ for @$listing;
		close $log_fh;
		say "A copy of the above result is kept in $logfile\n";
	} else {
		say "\nNo updates available.";
	}
}

my $output = get_update_list;
print_output $output;

exit 0;
