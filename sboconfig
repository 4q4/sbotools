#!/usr/bin/env perl
#
# vim: set ts=4:noet
#
# sboconfig
# script to handle sbotools configuration
#
# author: Jacob Pipkin <j@dawnrazor.net>
# date: Pungenday, the 40th day of Discord in the YOLD 3178
# license: WTFPL <http://sam.zoy.org/wtfpl/COPYING>

use 5.16.0;
use strict;
use warnings FATAL => 'all';
use SBO::Lib;
use File::Basename;
use Getopt::Std;
use File::Copy;
use File::Path qw(make_path);
use File::Temp qw(tempfile);;

my %config = %SBO::Lib::config;
my $self = basename ($0);

sub show_usage () {
	print <<EOF
Usage: $self [options] [arguments]

Options:
  -h: this screen.
  -v: version information.
  -l: show current options.

Config options (defaults shown):
  -c FALSE:
      NOCLEAN: if TRUE, do NOT clean up after building by default.
  -d FALSE:
      DISTCLEAN: if TRUE, DO clean distfiles by default after building.
  -j FALSE:
      JOBS: numeric -j setting to feed to make for multicore systems.
  -p FALSE:
      PKG_DIR: set a directory to store packages in. 
  -s /usr/sbo:
      SBO_HOME: set the SBo directory.

EOF
}

my %options;
getopts ('hvlc:d:p:s:j:', \%options);

show_usage and exit 0 if exists $options{h};
show_version and exit 0 if exists $options{v};

my %valid_confs = (
	c => 'NOCLEAN',
	d => 'DISTCLEAN',
	j => 'JOBS',
	p => 'PKG_DIR',
	s => 'SBO_HOME',
);

my %params = reverse %valid_confs;

if (exists $options{l}) {
	my @keys = sort {$a cmp $b} keys %config;
	say "sboconfig -$params{$_}:\n    $_=$config{$_}" for @keys;
	exit 0;
}

show_usage and exit 0 unless %options;

# setup what's being changed.
my %changes;
while (my ($key, $value) = each %valid_confs) {
	$changes{$value} = $options{$key} if exists $options{$key};
}
if (exists $changes{JOBS}) {
	die "You have provided an invalid parameter for -j\n" unless
		($changes{JOBS} =~ /^\d+$/ || $changes{JOBS} eq 'FALSE');
}

my $conf_dir = $SBO::Lib::conf_dir;
my $conf_file = $SBO::Lib::conf_file;

# safely modify our conf file; copy to a temp location, edit the temp file,
# move the edited file into place
sub config_write ($$) {
	exists $_[1] or script_error 'config_write requires two arguments.';
	my ($key, $val) = @_;
	if (! -d $conf_dir) {
		mkdir $conf_dir or die "Unable to create $conf_dir. Exiting.\n";
	}
	if (-f $conf_file) {
		my $tempfh = tempfile (DIR => $SBO::Lib::tempdir);
		my $tempfn = get_tmp_perlfn $tempfh;
		copy ($conf_file, $tempfn);
		# tie the file so that if $key is already there, we just change that
		# line and untie it
		tie my @temp, 'Tie::File', $tempfn;
		my $has;
		my $regex = qr/\A\Q$key\E=/;
		FIRST: for my $tmpline (@temp) {
			$has++, $tmpline = "$key=$val", last FIRST if $tmpline =~ $regex;
		}
		untie @temp;
		# otherwise, append our new $key=$value pair
		unless ($has) {
			my $fh = open_fh ($tempfn, '>>');
			print {$fh} "$key=$val\n";
			close $fh;
		}
		move ($tempfn, $conf_file) || return;
	} else {
		# no config file, easiest case of all.
		my $fh = open_fh $conf_file, '>' || return;
		say {$fh} "$key=$val";
		close $fh;
	}
	return 1;
}

while (my ($key, $value) = each %changes) {
	print "Setting $key to $value...\n";
	config_write $key, $value or warn "Unable to write to $conf_file\n";
}

exit 0;
